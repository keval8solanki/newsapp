{"version":3,"sources":["Component/UploadVideo.js","App.js","serviceWorker.js","index.js"],"names":["UploadVideo","props","useState","file","data","setdata","onSubmit","e","preventDefault","formData","FormData","append","axios","method","url","then","response","console","log","catch","label","type","onChange","target","files","accept","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yOA4CeA,EAzCK,SAACC,GAAW,IAAD,EAEHC,mBAAS,CAAEC,KAAM,OAFd,mBAEpBC,EAFoB,KAEdC,EAFc,KAkC3B,OACI,0BAAMC,SA1BS,SAACC,GAChBA,EAAEC,iBAEF,IAAIC,EAAW,IAAIC,SACnBD,EAASE,OAAO,QAASP,EAAKD,KAAK,IAEnCS,IAAM,CACFC,OAAQ,OACRC,IAde,wDAefV,KAAMK,IAGLM,MAAK,SAAUC,GAEZC,QAAQC,IAAI,cAEfC,OAAM,SAAUH,GAEbC,QAAQC,IAAI,gBAShB,2BAAOE,MAAM,cAAcC,KAAK,OAAOC,SA/BtB,SAACf,GACtBF,EAAQ,CAAEF,KAAMI,EAAEgB,OAAOC,SA8B8CC,OAAO,YAC1E,4BAAQJ,KAAK,UAAb,UC5BGK,MATf,WACE,OACE,yBAAKC,UAAU,OACb,wCACA,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdvB,OAAM,SAAAwB,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.8347485a.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport axios from 'axios';\r\n\r\nconst UploadVideo = (props) => {\r\n\r\n    const [data, setdata] = useState({ file: null })\r\n    const uploadEndpoint = 'https://newsapp-video-upload-api.herokuapp.com/upload'\r\n\r\n    const handleFileUpload = (e) => {\r\n        setdata({ file: e.target.files })\r\n    }\r\n\r\n    const submitFile = (e) => {\r\n        e.preventDefault();\r\n\r\n        let formData = new FormData();\r\n        formData.append('video', data.file[0]);\r\n\r\n        axios({\r\n            method: 'post',\r\n            url: uploadEndpoint,\r\n            data: formData,\r\n            //headers: { 'Content-Type': 'multipart/form-data' }\r\n        })\r\n            .then(function (response) {\r\n                //handle success\r\n                console.log('success');\r\n            })\r\n            .catch(function (response) {\r\n                //handle error\r\n                console.log('failure');\r\n            });\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <form onSubmit={submitFile}>\r\n            <input label='upload file' type='file' onChange={handleFileUpload} accept=\"video/*\" />\r\n            <button type='submit'>Send</button>\r\n        </form>\r\n    )\r\n}\r\nexport default UploadVideo;","import React from 'react';\nimport UploadVideo from './Component/UploadVideo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>News App</h1>\n      <UploadVideo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}